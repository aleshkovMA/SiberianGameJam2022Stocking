using UnityEngine;
<<<<<<< HEAD
using UnityEngine.UI;
=======
using UnityEngine.Events;
>>>>>>> 51c4b30a7758f95dd15d0e3ae0288638ce336c3c

public class Character : MonoBehaviour
{
    [SerializeField]
    private Animator animator;
    public bool playable = true;
    public float speed;

    private Rigidbody2D _RB2D;
    private Transform _character;
    private bool _isFacingRight = false;

<<<<<<< HEAD
    [SerializeField]
    private List<AudioClip> _audioClipsForSteps;
    private AudioSource _audioSource;
    private int _currentStepIndex = 1;


    void Start()
    {
        _audioSource = GetComponent<AudioSource>();
=======
    // UnityEvents ��� ������ � RPGTalk
    public UnityEvent becomeActive = new UnityEvent();

    public UnityEvent becomeInactive = new UnityEvent();

    void Start()
    {
        becomeActive.AddListener(SetActive);
        becomeInactive.AddListener(SetInactive);

>>>>>>> 51c4b30a7758f95dd15d0e3ae0288638ce336c3c
        _character = GetComponent<Transform>();
        _RB2D = GetComponent<Rigidbody2D>();
    }

   
    public void SetActive()
    {
        playable = true;
    }

    public void SetInactive()
    {
        playable = false;
    }
    void FixedUpdate()
    {
        if (playable)
        {
            float direction = Input.GetAxis("Horizontal");

            if (direction > 0 && !_isFacingRight)
            {
                _isFacingRight = true;
                Flip();

            }
            else if (direction < 0 && _isFacingRight)
            {
                _isFacingRight = false;
                Flip();
            }
            else if (direction == 0)
            {
                animator.Play("StockingIdle");
            }
            else
            {
                animator.Play("StockingWalk");
            }

            _RB2D.MovePosition(_RB2D.position + new Vector2(speed * direction, 0.0f));
        }
    }

    void Flip()
    {
        Vector3 theScale = _character.localScale;
<<<<<<< HEAD
        theScale.x *= -1;
        _character.localScale = theScale;
    }

    public void SetInactive()
    {
        playable = false;
    }

    public void SetActive()
    {
        playable = true;
    }

    public void PlayRandomStepSound()
    {
        if (_currentStepIndex == 1)
        {
            _audioSource.PlayOneShot(_audioClipsForSteps[Random.Range(0, 2)]);
            _currentStepIndex = 2;
        }
        else
        {
            _audioSource.PlayOneShot(_audioClipsForSteps[Random.Range(2, 4)]);
            _currentStepIndex = 1;
        }
    }
=======
        //��������� �������� ��������� �� ��� �
        theScale.x *= -1;
        //������ ����� ������ ���������, ������ �������, �� ��������� ����������
        _character.localScale = theScale;
    }
>>>>>>> 51c4b30a7758f95dd15d0e3ae0288638ce336c3c
}
